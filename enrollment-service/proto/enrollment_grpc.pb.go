// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EnrollmentServiceClient is the client API for EnrollmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrollmentServiceClient interface {
	EnrollUser(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*EnrollResponse, error)
	GetEnrollmentsByUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*EnrollmentsResponse, error)
	GetEnrollmentsByCourse(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*EnrollmentsResponse, error)
}

type enrollmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrollmentServiceClient(cc grpc.ClientConnInterface) EnrollmentServiceClient {
	return &enrollmentServiceClient{cc}
}

func (c *enrollmentServiceClient) EnrollUser(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*EnrollResponse, error) {
	out := new(EnrollResponse)
	err := c.cc.Invoke(ctx, "/enrollment.EnrollmentService/EnrollUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) GetEnrollmentsByUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*EnrollmentsResponse, error) {
	out := new(EnrollmentsResponse)
	err := c.cc.Invoke(ctx, "/enrollment.EnrollmentService/GetEnrollmentsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) GetEnrollmentsByCourse(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*EnrollmentsResponse, error) {
	out := new(EnrollmentsResponse)
	err := c.cc.Invoke(ctx, "/enrollment.EnrollmentService/GetEnrollmentsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrollmentServiceServer is the server API for EnrollmentService service.
// All implementations must embed UnimplementedEnrollmentServiceServer
// for forward compatibility
type EnrollmentServiceServer interface {
	EnrollUser(context.Context, *EnrollRequest) (*EnrollResponse, error)
	GetEnrollmentsByUser(context.Context, *UserIDRequest) (*EnrollmentsResponse, error)
	GetEnrollmentsByCourse(context.Context, *CourseIDRequest) (*EnrollmentsResponse, error)
	mustEmbedUnimplementedEnrollmentServiceServer()
}

// UnimplementedEnrollmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnrollmentServiceServer struct {
}

func (UnimplementedEnrollmentServiceServer) EnrollUser(context.Context, *EnrollRequest) (*EnrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUser not implemented")
}
func (UnimplementedEnrollmentServiceServer) GetEnrollmentsByUser(context.Context, *UserIDRequest) (*EnrollmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByUser not implemented")
}
func (UnimplementedEnrollmentServiceServer) GetEnrollmentsByCourse(context.Context, *CourseIDRequest) (*EnrollmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByCourse not implemented")
}
func (UnimplementedEnrollmentServiceServer) mustEmbedUnimplementedEnrollmentServiceServer() {}

// UnsafeEnrollmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrollmentServiceServer will
// result in compilation errors.
type UnsafeEnrollmentServiceServer interface {
	mustEmbedUnimplementedEnrollmentServiceServer()
}

func RegisterEnrollmentServiceServer(s *grpc.Server, srv EnrollmentServiceServer) {
	s.RegisterService(&_EnrollmentService_serviceDesc, srv)
}

func _EnrollmentService_EnrollUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).EnrollUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enrollment.EnrollmentService/EnrollUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).EnrollUser(ctx, req.(*EnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_GetEnrollmentsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).GetEnrollmentsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enrollment.EnrollmentService/GetEnrollmentsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).GetEnrollmentsByUser(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_GetEnrollmentsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).GetEnrollmentsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enrollment.EnrollmentService/GetEnrollmentsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).GetEnrollmentsByCourse(ctx, req.(*CourseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnrollmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enrollment.EnrollmentService",
	HandlerType: (*EnrollmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollUser",
			Handler:    _EnrollmentService_EnrollUser_Handler,
		},
		{
			MethodName: "GetEnrollmentsByUser",
			Handler:    _EnrollmentService_GetEnrollmentsByUser_Handler,
		},
		{
			MethodName: "GetEnrollmentsByCourse",
			Handler:    _EnrollmentService_GetEnrollmentsByCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/enrollment.proto",
}
